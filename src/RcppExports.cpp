// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// lin_polylog_framed_clust
Rcpp::List lin_polylog_framed_clust(std::vector<double>& X, int width, int K, int First, int Last, int Prev, int Next);
RcppExport SEXP _OptCirClust_lin_polylog_framed_clust(SEXP XSEXP, SEXP widthSEXP, SEXP KSEXP, SEXP FirstSEXP, SEXP LastSEXP, SEXP PrevSEXP, SEXP NextSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type First(FirstSEXP);
    Rcpp::traits::input_parameter< int >::type Last(LastSEXP);
    Rcpp::traits::input_parameter< int >::type Prev(PrevSEXP);
    Rcpp::traits::input_parameter< int >::type Next(NextSEXP);
    rcpp_result_gen = Rcpp::wrap(lin_polylog_framed_clust(X, width, K, First, Last, Prev, Next));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_OptCirClust_lin_polylog_framed_clust", (DL_FUNC) &_OptCirClust_lin_polylog_framed_clust, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_OptCirClust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
